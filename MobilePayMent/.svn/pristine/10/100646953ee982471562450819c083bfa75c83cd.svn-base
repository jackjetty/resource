package com.rising.general.service.impl;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.URL;
import java.net.URLConnection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.springframework.stereotype.Service;

import com.rising.general.service.PayOrder;
import com.rising.mobilepayment.commom.CommonUtil;

@Service("qQVipOrderService")
public class QQVipOrderServiceImpl implements PayOrder {
	
	private static String caller = "phoneNumber";

	private static String objid = "productId";

	private static String paymoney = "cost";

	private static String username = "targetNumber";

	@Override
	public HashMap<String, String> getParameterMap(HashMap<String, String> map) {
		HashMap<String,String> param = new HashMap<String, String>();
		String productId = map.get(objid);
		String payid = productId.substring(6, 7);
		String objid = productId.substring(0, 5);
		param.put("objid",objid);
		param.put("username", map.get(username));
		param.put("caller", map.get(caller));
		param.put("paymoney", map.get(paymoney));
		param.put("payid", payid);
		return param;
	}

	@Override
	public boolean payOrder(HashMap<String, String> paraMap, String url,
			HashMap<String, Object> resultMap) throws Exception {
		String result = "";
		java.net.URL httpUrl;
		String parameter = mapToString(paraMap);
	 
		
		
		httpUrl = new URL(url);
		URLConnection uc = (URLConnection) httpUrl.openConnection();
		uc.setDoOutput(true);
		uc.setDoInput(true);
		PrintWriter out = new PrintWriter(uc.getOutputStream());
		out.write(parameter);
		out.flush();
		out.close();
		BufferedReader in = new BufferedReader(new InputStreamReader(
				uc.getInputStream()));
		String line;
		while ((line = in.readLine()) != null) {
			result += line;
		}
		in.close(); 
		Pattern responsePtn = Pattern.compile("\\$+");
		 
		String[] strs = responsePtn.split(result); 
		Pattern cellPtn = Pattern.compile("^(.+)=(.*?)$"); 
		for (String cellRst:strs) { 
			Matcher matcher = cellPtn.matcher(cellRst ); 
			if(matcher.find()){
				
				
				resultMap.put(CommonUtil.trim(matcher.group(1)), CommonUtil.trim(matcher.group(2)));
			       
			}  
		}  
		if ("0".equals(resultMap.get("result"))) {
			resultMap.put("resultInfo", "成功");
			return true;
		} else {
			resultMap.put("resultInfo", "失败");
			return false;
		}
	}
	
	private String mapToString(HashMap<String, String> map) {
		String parameter = "";
		Set<String> set = map.keySet();
		Iterator<String> it = set.iterator();
		while (it.hasNext()) {
			String key = it.next();
			String value = map.get(key);
			parameter = parameter + key + "=" + value + "$";
		}
		return parameter;
	}

}
