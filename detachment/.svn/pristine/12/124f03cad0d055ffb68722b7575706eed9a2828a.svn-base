package com.detachment.dao.impl;
import java.io.Serializable;
import java.lang.reflect.ParameterizedType; 
import java.util.ArrayList;
import java.util.List; 
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Repository; 
import com.detachment.dao.BaseDao;  
public class BaseDaoImpl<T> implements BaseDao<T>{
	@Autowired
	@Qualifier("sessionFactory")
	SessionFactory sessionFactory;
	private Class<T> clazz; 
	@Override
	public Session getSession() {
		return sessionFactory.getCurrentSession();
	}
	public BaseDaoImpl() {  
        ParameterizedType type = (ParameterizedType) this.getClass().getGenericSuperclass();  
        clazz = (Class<T>) type.getActualTypeArguments()[0];   
    }  
	public void save(T entity) {  
        this.getSession().save(entity);  
        this.getSession().flush();
    } 
    
    
    public void saveOrUpdate(T entity) {  
    	 
        this.getSession().saveOrUpdate(entity);  
        this.getSession().flush();
    } 
    public T findById(Serializable id) {  
        return (T) this.getSession().get(this.clazz, id);  
    } 
  
    public void update(T entity) {  
        this.getSession().update(entity);  
    }  
  
    public void delete(T entity) {  
        this.getSession().delete(entity);  
    } 
    public List<T> findByHQL(String hql, Object... params) {  
        Query query = this.getSession().createQuery(hql);
        for (int i = 0; params != null && i < params.length; i++) {
            query.setParameter(i, params[i]);  
        }  
        return query.list();  
    } 
    public List<T> findByHQL(String hql, ArrayList arraylist){
    	Query query = this.getSession().createQuery(hql);  
        for (int i = 0; i<arraylist.size(); i++) {  
            query.setParameter(i, arraylist.get(i));  
        }  
        return query.list();  
    }
    public List<T> findPage(String hql,int offset,int pageSize, Object... params){
    	Query query = this.getSession().createQuery(hql);  
        for (int i = 0; params != null && i < params.length; i++) {  
            query.setParameter(i, params[i]);  
        }   
        offset=offset<0?0:offset;
        return query.setFirstResult(offset).setMaxResults(pageSize).list(); 
    }
    public List<T> findPage(String hql,int offset,int pageSize, ArrayList<Object> arraylist){
    	Query query = this.getSession().createQuery(hql);  
        for (int i = 0; i<arraylist.size(); i++) {  
            query.setParameter(i, arraylist.get(i));  
        } 
        offset=offset<0?0:offset;
        return query.setFirstResult(offset).setMaxResults(pageSize).list();
    }
    public int findCount(String hql, Object... params) {
    	int recordCount =0;
    	List list=findByHQL(  hql,    params);
    	if (list == null || list.size() == 0) {
			return recordCount;
		} 
    	recordCount = ((Number) list.get(0)).intValue(); 
		return recordCount;
    }
    public int findCount(String hql, ArrayList<Object> arraylist){
    	int recordCount =0;
    	List list=findByHQL(hql,arraylist);
    	if (list == null || list.size() == 0) {
			return recordCount;
		} 
    	recordCount = ((Number) list.get(0)).intValue(); 
		return recordCount;
    }
    

}