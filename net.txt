http://www.cnblogs.com/leiOOlei/category/522481.html
http://blog.csdn.net/morning99/article/details/40426133

https://doc.open.alipay.com/docs/doc.htm?spm=a219a.7629140.0.0.0rYmBP&treeId=54&articleId=106682&docType=1
https://doc.open.alipay.com/doc2/detail.htm?treeId=54&articleId=104509&docType=1

13336022050@189.cn
Rising_201610

https://github.com/venusdrogon/feilong-platform/tree/repository/com/feilong/platform/feilong-core/1.2.2-SNAPSHOT


<project>

    ....
    <properties>
        <version.feilong-platform>1.10.3</version.feilong-platform>
        ....
    </properties>

    ....
    <repositories>
        <repository>
            <id>feilong-repository</id>
            <url>https://raw.github.com/venusdrogon/feilong-platform/repository</url>
        </repository>
    </repositories>

    ....
    <dependencies>
        ....
        <dependency>
            <groupId>com.feilong.platform</groupId>
            <artifactId>feilong-core</artifactId>
            <version>${version.feilong-platform}</version>
        </dependency>
        ....
    </dependencies>
    ....
</project>
文档中心
进入管理中心
 
帮助支持 
 搜索
产品介绍
接入指引
新手入门及常见问题
快速接入
Android集成流程
iOS集成流程
Android调用说明
iOS调用说明
请求参数说明
同步通知参数说明
服务器异步通知参数说明
手机网站支付转APP支付
交易辅助接口
沙箱联调指南
对账说明
SDK及DEMO下载
LOGO文件下载
FAQ
 
App支付快速接入
更新时间：2017/03/20 访问次数：92281
第一步：创建应用并获取APPID
第二步：配置密钥
第三步：搭建和配置开发环境
第四步：调用接口
本文档展示了如何从零开始，使用蚂蚁金服开放平台服务端SDK快速接入App支付产品，完成与支付宝对接的部分。

注意： 文档中的代码示例和Demo是用来阐述API基本使用方法的，仅针对大众场景。供ISV参考，特殊情况还请ISV自行扩展，确保符合自身业务需求。

支付产品全面升级，若您使用的是老接口，请移步老版本移动支付文档。

若您希望从移动支付老版本升级为APP支付新版本，请参考以下步骤完成APP支付新版本的接入工作。若想了解更多关于新版本的升级改造内容，可参考移动支付与APP支付对比。

沙箱环境是开放平台提供给开发者调试接口的环境，为了避免在线上生产环境联调过程中遇到问题，建议在沙箱环境中联调通过后再在线上生产环境进行联调。具体操作步骤见沙箱联调指南。

第一步：创建应用并获取APPID

要在您的应用中使用支付宝开放产品的接口能力，您需要先去蚂蚁金服开放平台（open.alipay.com），在开发者中心中创建登记您的应用，并提交审核，审核通过后会为您生成应用唯一标识（APPID），并且可以申请开通开放产品使用权限，通过APPID您的应用才能调用开放产品的接口能力。需要详细了解开放平台创建应用步骤请参考《开放平台应用创建指南》。

第二步：配置密钥

开发者调用接口前需要先生成RSA密钥，RSA密钥包含应用私钥(APP_PRIVATE_KEY)、应用公钥(APP_PUBLIC_KEY）。生成密钥后在开放平台开发者中心进行密钥配置，配置完成后可以获取支付宝公钥(ALIPAY_PUBLIC_KEY)。详细步骤请参考《配置应用环境》。

第三步：搭建和配置开发环境

接入移动支付需要集成两个SDK，客户端SDK需要集成在商户自己的APP中，用于唤起支付宝APP并发送交易数据，并在支付宝APP返回商户APP时获得支付结果。服务端SDK需要商户集成在自己的服务端系统中，用于协助解析并验证客户端同步返回的支付结果和异步通知。

如何集成客户端SDK

点击查看iOS集成流程详解，Android集成流程详解。

如何集成服务端SDK

为了帮助开发者调用开放接口，我们提供了开放平台服务端SDK，包含JAVA、PHP和.NET三语言版本，封装了签名&验签、HTTP接口请求等基础功能。请先下载对应语言版本的SDK并引入您的开发工程。

SDK调用前需要进行初始化，代码示例如下：

1
AlipayClient alipayClient = new DefaultAlipayClient(URL, APP_ID, APP_PRIVATE_KEY, FORMAT, CHARSET, ALIPAY_PUBLIC_KEY, SIGN_TYPE);
关键参数说明：

配置参数	示例值解释	获取方式/示例值
URL	支付宝网关（固定）	https://openapi.alipay.com/gateway.do
APP_ID	APPID即创建应用后生成	获取见上面创建应用并获取APPID
APP_PRIVATE_KEY	开发者应用私钥，由开发者自己生成	获取见上面配置密钥
FORMAT	参数返回格式，只支持json	json（固定）
CHARSET	请求和签名使用的字符编码格式，支持GBK和UTF-8	开发者根据实际工程编码配置
ALIPAY_PUBLIC_KEY	支付宝公钥，由支付宝生成	获取详见上面配置密钥
SIGN_TYPE	商户生成签名字符串所使用的签名算法类型，目前支持RSA2和RSA，推荐使用RSA2	RSA2
接下来，就可以用alipayClient来调用具体的API了。alipayClient只需要初始化一次，后续调用不同的API都可以使用同一个alipayClient对象。

TIPS：App支付不支持第三方授权，不能代商家发起请求。
第四步：调用接口

系统交互流程：
image

如图，以Android平台为例：
第4步：调用支付接口：此消息就是本接口所描述的支付宝客户端SDK提供的支付对象PayTask，将商户签名后的订单信息传进payv2方法唤起支付宝收银台，交易数据格式具体参见请求参数说明。
第5步：支付请求：支付宝客户端SDK将会按照商户客户端提供的请求参数发送支付请求。
第8步：接口返回支付结果：商户客户端在第4步中调用的支付接口，会返回最终的支付结果（即同步通知），参见客户端同步返回。
第13步：用户在支付宝APP或H5收银台完成支付后，会根据商户在手机网站支付API中传入的前台回跳地址return_url自动跳转回商户页面，同时在URL请求中附带上支付结果参数。同时，支付宝还会根据原始支付API中传入的异步通知地址notify_url，通过POST请求的形式将支付结果作为参数通知到商户系统，详情见支付结果异步通知。

除了正向支付流程外，支付宝也提供交易查询、关闭、退款、退款查询以及对账等配套API。

特别注意：
构造交易数据并签名必须在商户服务端完成，商户的应用私钥绝对不能保存在商户APP客户端中，也不能从服务端下发。
同步返回的数据，只是一个简单的结果通知，商户确定该笔交易付款是否成功需要依赖服务端收到支付宝异步通知的结果进行判断。
商户系统接收到通知以后，必须通过验签（验证通知中的sign参数）来确保支付通知是由支付宝发送的。建议使用支付宝提供的SDK来完成，详细验签规则参考异步通知验签。
使用SDK快速接入

App支付API必须通过支付宝提供的移动端SDK来调用，点击查看iOS调用说明，Android调用说明。

交易操作

1.交易查询接口alipay.trade.query：

1
2
3
4
5
6
7
8
9
AlipayClient alipayClient = new DefaultAlipayClient("https://openapi.alipay.com/gateway.do", APP_ID, APP_PRIVATE_KEY, "json", CHARSET, ALIPAY_PUBLIC_KEY, "RSA2"); //获得初始化的AlipayClient
AlipayTradeQueryRequest request = new AlipayTradeQueryRequest();//创建API对应的request类
request.setBizContent("{" +
"   \"out_trade_no\":\"20150320010101001\"," +
"   \"trade_no\":\"2014112611001004680073956707\"" +
"  }");//设置业务参数
AlipayTradeQueryResponse response = alipayClient.execute(request);//通过alipayClient调用API，获得对应的response类
System.out.print(response.getBody());
//根据response中的结果继续业务逻辑处理
关键入参：

参数名称	参数说明
out_trade_no	支付时传入的商户订单号，与trade_no必填一个
trade_no	支付时返回的支付宝交易号，与out_trade_no必填一个
关键出参：

参数名称	参数说明
trade_no	支付宝28位交易号
out_trade_no	支付时传入的商户订单号
trade_status	交易当前状态
2.交易退款接口alipay.trade.refund：

1
2
3
4
5
6
7
8
9
10
11
AlipayClient alipayClient = new DefaultAlipayClient("https://openapi.alipay.com/gateway.do", APP_ID, APP_PRIVATE_KEY, "json", CHARSET, ALIPAY_PUBLIC_KEY, "RSA2"); //获得初始化的AlipayClient
AlipayTradeRefundRequest request = new AlipayTradeRefundRequest();//创建API对应的request类
request.setBizContent("{" +
"    \"out_trade_no\":\"20150320010101001\"," +
"    \"trade_no\":\"2014112611001004680073956707\"," +
"    \"out_request_no\":\"1000001\"," +
"    \"refund_amount\":\"1\"" +
"  }");//设置业务参数
AlipayTradeRefundResponse response = alipayClient.execute(request);//通过alipayClient调用API，获得对应的response类
System.out.print(response.getBody());
// 根据response中的结果继续业务逻辑处理
关键入参：

参数名称	参数说明
out_trade_no	支付时传入的商户订单号，与trade_no必填一个
trade_no	支付时返回的支付宝交易号，与out_trade_no必填一个
out_request_no	本次退款请求流水号，部分退款时必传
refund_amount	本次退款金额
关键出参：

参数名称	参数说明
refund_fee	该笔交易已退款的总金额
3.查询对账单下载地址接口alipay.data.dataservice.bill.downloadurl.query：

1
2
3
4
5
6
7
8
9
AlipayClient alipayClient = new DefaultAlipayClient("https://openapi.alipay.com/gateway.do", APP_ID, APP_PRIVATE_KEY, "json", CHARSET, ALIPAY_PUBLIC_KEY, "RSA2"); //获得初始化的AlipayClient
AlipayDataDataserviceBillDownloadurlQueryRequest request = new AlipayDataDataserviceBillDownloadurlQueryRequest();//创建API对应的request类
request.setBizContent("{" +
"    \"bill_type\":\"trade\"," +
"    \"bill_date\":\"2016-04-05\"" +
"  }");//设置业务参数
AlipayDataDataserviceBillDownloadurlQueryResponse response = alipayClient.execute(request);
System.out.print(response.getBody());
//根据response中的结果继续业务逻辑处理

//将接口返回的对账单下载地址传入urlStr
String urlStr = "http://dwbillcenter.alipay.com/downloadBillFile.resource?bizType=X&userId=X&fileType=X&bizDates=X&downloadFileName=X&fileId=X";
//指定希望保存的文件路径
String filePath = "/Users/fund_bill_20160405.csv";
URL url = null;
HttpURLConnection httpUrlConnection = null;
InputStream fis = null;
FileOutputStream fos = null;
try {
    url = new URL(urlStr);
    httpUrlConnection = (HttpURLConnection) url.openConnection();
    httpUrlConnection.setConnectTimeout(5 * 1000);
    httpUrlConnection.setDoInput(true);
    httpUrlConnection.setDoOutput(true);
    httpUrlConnection.setUseCaches(false);
    httpUrlConnection.setRequestMethod("GET");
    httpUrlConnection.setRequestProperty("Charsert", "UTF-8");
    httpUrlConnection.connect();
    fis = httpUrlConnection.getInputStream();
    byte[] temp = new byte[1024];
    int b;
    fos = new FileOutputStream(new File(filePath));
    while ((b = fis.read(temp)) != -1) {
        fos.write(temp, 0, b);
        fos.flush();
    }
} catch (MalformedURLException e) {
    e.printStackTrace();
} catch (IOException e) {
    e.printStackTrace();
} finally {
    try {
        fis.close();
        fos.close();
        httpUrlConnection.disconnect();
    } catch (NullPointerException e) {
        e.printStackTrace();
    } catch (IOException e) {
        e.printStackTrace();
    }
}



private String getCharset(String fileName) throws IOException{  
        
          BufferedInputStream bin = new BufferedInputStream(new FileInputStream(fileName));    
          int p = (bin.read() << 8) + bin.read();    
            
          String code = null;    
            
          switch (p) {    
              case 0xefbb:    
                  code = "UTF-8";    
                  break;    
              case 0xfffe:    
                  code = "Unicode";    
                  break;    
              case 0xfeff:    
                  code = "UTF-16BE";    
                  break;    
              default:    
                  code = "GBK";    
          }    
          return code;  
  }  

public String getTextFromText(String filePath){  
         
           try {  
               InputStreamReader isr = new InputStreamReader(new FileInputStream(filePath),getCharset(filePath));  
               BufferedReader br = new BufferedReader(isr);  
                 
               StringBuffer sb = new StringBuffer();     
               String temp = null;     
               while((temp = br.readLine()) != null){     
                   sb.append(temp);     
               }     
               br.close();          
               return sb.toString();     
           } catch (FileNotFoundException e) {  
               // TODO Auto-generated catch block  
               e.printStackTrace();  
                 
           }catch (IOException e) {  
               // TODO Auto-generated catch block  
               e.printStackTrace();  
           }     
           return null;  
   }  
