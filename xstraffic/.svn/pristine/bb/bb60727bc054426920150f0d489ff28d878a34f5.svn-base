<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd 
	http://www.springframework.org/schema/context
 	http://www.springframework.org/schema/context/spring-context-3.1.xsd 
 	http://www.springframework.org/schema/tx 
 	http://www.springframework.org/schema/tx/spring-tx-3.1.xsd 
 	http://www.springframework.org/schema/aop   
    http://www.springframework.org/schema/aop/spring-aop-3.1.xsd">


	<!--  <context:component-scan base-package="com.traffic.management"
		use-default-filters="false">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Service" />
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Repository" />
	</context:component-scan>-->
	<context:component-scan base-package="com.traffic"
		use-default-filters="false">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Service" />
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Repository" />
	</context:component-scan>
	<context:component-scan base-package="cn.rising">   
        <context:include-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Service" />
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Repository" /> 
    </context:component-scan> 
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="net.sourceforge.jtds.jdbc.Driver"></property>
		<!-- <property name="jdbcUrl" value="jdbc:jtds:sqlserver://125.120.162.174:1433/traffic;tds=8.0;lastupdatecount=true">
		</property> -->
		
		<property name="jdbcUrl" value="jdbc:jtds:sqlserver://121.40.107.110:1433/traffic;tds=8.0;lastupdatecount=true">
		</property>		 
		<property name="user" value="sa"></property>
		<property name="password" value="zhongjie"></property>
		<property name="minPoolSize">
			<value>5</value>
		</property>
		<property name="maxPoolSize">
			<value>10</value>
		</property>
		<property name="maxIdleTime">
			<value>1800</value>
		</property>
		<property name="acquireIncrement">
			<value>5</value>
		</property>
		<property name="maxStatements">
			<value>0</value>
		</property>
		<property name="initialPoolSize">
			<value>2</value>
		</property>
		<property name="idleConnectionTestPeriod">
			<value>1800</value>
		</property>
		<property name="acquireRetryAttempts">
			<value>30</value>
		</property>
		<property name="breakAfterAcquireFailure">
			<value>true</value>
		</property>
		<property name="checkoutTimeout">
			<value>20000</value>
		</property>
		<property name="testConnectionOnCheckout">
			<value>false</value>
		</property>
	</bean>
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.SQLServerDialect</prop>
				<prop key="hibernate.show_sql">false</prop>
				<!-- prop key="hibernate.hbm2ddl.auto">update</prop> -->
				<!-- JDBC执行批量更新语句的大小 清除缓存（定期清除缓存，减小压力 -->
				<prop key="hibernate.jdbc.batch_size">30</prop>
				<prop key="hibernate.jdbc.use_scrollable_resultset">false</prop>
			</props>
		</property>
		<property name="mappingDirectoryLocations">

    <list>

       <value>WEB-INF/classes/com/traffic/pojo</value>

    </list>

</property>
 
	</bean>
	<aop:aspectj-autoproxy expose-proxy="true"/>
	
	<!-- 开启注解事务 只对当前配置文件有效 -->
  	<tx:annotation-driven transaction-manager="txManager"/>

    <bean id="txManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED" />
            <tx:method name="add*" propagation="REQUIRED" />
            <tx:method name="create*" propagation="REQUIRED" />
            <tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="update*" propagation="REQUIRED" />
            <tx:method name="merge*" propagation="REQUIRED" />
            <tx:method name="del*" propagation="REQUIRED" />
            <tx:method name="remove*" propagation="REQUIRED" />
            <tx:method name="put*" propagation="REQUIRED" />
            <tx:method name="use*" propagation="REQUIRED"/>
            <!--hibernate4必须配置为开启事务 否则 getCurrentSession()获取不到-->
            <tx:method name="get*" propagation="REQUIRED" read-only="true" />
            <tx:method name="count*" propagation="REQUIRED" read-only="true" />
            <tx:method name="find*" propagation="REQUIRED" read-only="true" />
            <tx:method name="list*" propagation="REQUIRED" read-only="true" />
            <tx:method name="voteWapElectors" propagation="REQUIRED" read-only="true" />
            <tx:method name="*" propagation="REQUIRED" />
        </tx:attributes>
    </tx:advice>
    <aop:config expose-proxy="true">
        <!-- 只对业务逻辑层实施事务(* com.traffic.management..service..*.*(..)) --> 
        <aop:pointcut id="txPointcut" expression="execution(* com.traffic.wei.service.impl.*.*(..))
            										or execution(* com.traffic.web.service..*.*(..))
            										or execution(* com.traffic.wap.service..*.*(..))" />
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>
    
	<context:property-placeholder  location="classpath:traffic.properties" ignore-unresolvable="true"/> 
	<import resource="redis-context.xml"/> 
</beans>