package com.traffic.wap.service.impl;

import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.rising.wei.bean.UserBean;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.opensymphony.xwork2.ActionContext;
import com.traffic.dao.AccidentDao;
import com.traffic.dao.ElectorDao;
import com.traffic.dao.InfoPicDao;
import com.traffic.dao.InfoTextDao;
import com.traffic.dao.MoveCarDao;
import com.traffic.dao.TenderDao;
import com.traffic.dao.UserDao;
import com.traffic.dao.VoteDao;
import com.traffic.dao.WeiUserDao;
import com.traffic.pojo.TbAccident;
import com.traffic.pojo.TbElector;
import com.traffic.pojo.TbInfoPic;
import com.traffic.pojo.TbInfoText;
import com.traffic.pojo.TbRole;
import com.traffic.pojo.TbTender;
import com.traffic.pojo.TbUser;
import com.traffic.pojo.TbVote;
import com.traffic.pojo.TbWeiUser;
import com.traffic.pojovo.TbAccidentVo;
import com.traffic.pojovo.TbInfoTextVo;
import com.traffic.pojovo.TbTenderVo;
import com.traffic.util.CommonUtil;
import com.traffic.util.Constant;
import com.traffic.util.DecriptUtil;
import com.traffic.util.GpsToBaiDu;
import com.traffic.util.HttpWeiUtil;
import com.traffic.util.UUIDGenerator;
import com.traffic.wap.service.QRWapService;
import com.traffic.wap.service.VoteWapService;
import com.traffic.web.service.AccidentService;
import com.traffic.web.service.impl.AccidentServiceImpl;

@Service("qrWapService")
public class QRWapServiceImpl implements QRWapService {

	private Log log = LogFactory.getLog(QRWapServiceImpl.class);

	@Autowired
	private TenderDao tenderDao;

	@Autowired
	private WeiUserDao weiUserDao;
	@Autowired
	private ElectorDao electorDao;

	@Value("${wei.appid}")
	private String APPID;

	@Value("${wei.appsecret}")
	private String APPSECRET;
	
	
	@Override
	public HashMap<String, Object> account(String eleId) {
		HashMap<String, Object> resultMap = new HashMap<String, Object>();

	 
		
		String hql=" select count(*) from TbTender where electorId=?";
		
		int tenderSum=tenderDao.findCount(hql, eleId);
		
		hql=" from TbElector  where number=?  ";
		int electorSum=electorDao.findByHQL(hql, new Integer(eleId).intValue()).get(0).getVotes();
		
		
		if(tenderSum<electorSum){
			resultMap.put("weiuser", eleId+"小于啊"); 
			return resultMap;
		}
		if(tenderSum==electorSum){
			resultMap.put("weiuser", eleId+"等于啊"); 
			return resultMap;
		}
		int midCount=tenderSum-electorSum;
		
		String sql="select top "+midCount+" td.id , td.openId from    tb_tender td  where td.electorId=?   ";
		hql+=" order by  td.createTime desc";
		List mResult = tenderDao.findBySQL(sql, eleId);
		Object[] rows;

		String tdId,tdOpenId; 
		TbTender tbTender;
		System.out.println("查询个数"+mResult.size());
		for (Iterator iter = mResult.iterator(); iter.hasNext();) {
			rows = (Object[]) iter.next();
			tdId = CommonUtil.trim(rows[0]);
			tdOpenId = CommonUtil.trim(rows[1]);
			tbTender=tenderDao.findById(tdId);
			tenderDao.delete(tbTender);
		}  

		resultMap.put("weiuser", "success");

		return resultMap;

	}

	@Override
	public HashMap<String, Object> refresh() {
		HashMap<String, Object> resultMap = new HashMap<String, Object>();

		String hql = "from TbWeiUser where phoneNumber is null and   subscribe_time is null  ";

		int pageSize = 20;
		List<TbWeiUser> weiUserList;
		int pageIndex = 1;

		weiUserList = weiUserDao.findPage(hql, (pageIndex-1)*pageSize, pageSize,  new ArrayList());
		for (TbWeiUser tbWeiUser : weiUserList) {
			tbWeiUser.setPhoneNumber("1234");
			try {
				UserBean userBean = HttpWeiUtil.getInstance(APPID, APPSECRET)
						.getUserBean(tbWeiUser.getOpenId());

				if (userBean.getSubscribe() == 1) {
					resultMap.put("subscribe", true);
					tbWeiUser.setCity(userBean.getCity());
					tbWeiUser.setCountry(userBean.getCountry());
					tbWeiUser.setHeadimgurl(userBean.getHeadimgurl());
					tbWeiUser.setLanguage(userBean.getLanguage());
					tbWeiUser.setNickname(userBean.getNickname());
					tbWeiUser.setProvince(userBean.getProvince());
					tbWeiUser.setSex(userBean.getSex());
					tbWeiUser.setSubscribe(userBean.getSubscribe());
				}

				if (userBean.getSubscribe_time() != null)
					tbWeiUser.setSubscribeTime(Long.toString(userBean
							.getSubscribe_time()));
				weiUserDao.saveOrUpdate(tbWeiUser);

			} catch (Exception ex) {

			}

		}

		// 123

		resultMap.put("weiuser", "success");

		return resultMap;

	}

	@Override
	public HashMap<String, Object> test(String eleId) {
		// TODO Auto-generated method stub
		HashMap<String, Object> resultMap = new HashMap<String, Object>();

		String hql;

		String sql = "select electorid,openId,convert(varchar(100),createTime ,23) as 'caldate' , count(openid+electorid+convert(varchar(100),createTime ,23))  as 'cttsum'";
		sql += " from tb_tender where  ";
		sql += "  electorid=?  ";
		sql += "  group by  openid,electorid ,convert(varchar(100),createTime ,23)   ";
		sql += "  having  count(openid+electorid+convert(varchar(100),createTime ,23))>1 ";

		List mResult = tenderDao.findBySQL(sql, eleId);
		Object[] rows;

		String electorId, openId, dateCal;
		List<TbTender> tenderList;
		TbTender tbTender;
		int index;
		for (Iterator iter = mResult.iterator(); iter.hasNext();) {
			rows = (Object[]) iter.next();
			electorId = CommonUtil.trim(rows[0]);
			openId = CommonUtil.trim(rows[1]);
			dateCal = CommonUtil.trim(rows[2]);
			hql = "from TbTender where electorId=? and openId=? and convert(varchar(100),createTime ,23) =? order by createTime";
			tenderList = tenderDao.findByHQL(hql, electorId, openId, dateCal);
			System.out.println(tenderList.size());
			if (tenderList != null && tenderList.size() > 1) {
				for (index = 1; index < tenderList.size(); index++) {
					tbTender = tenderList.get(index);
					tenderDao.delete(tbTender);
				}

			}

		}

		resultMap.put("weiuser", "success");

		return resultMap;
	}

}